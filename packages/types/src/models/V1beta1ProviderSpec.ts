/**
 * Forklift API
 * Migration toolkit for virtualization (Forklift) API definitions.
 *
 * The version of the OpenAPI document: 2.4.0
 * Contact: kubev2v-dev@redhat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists } from '../runtime';

import type { V1beta1ProviderSpecSecret } from './V1beta1ProviderSpecSecret';
import {
  V1beta1ProviderSpecSecretFromJSON,
  V1beta1ProviderSpecSecretToJSON,
} from './V1beta1ProviderSpecSecret';

/**
 * Defines the desired state of Provider.
 * @export
 * @interface V1beta1ProviderSpec
 */
export interface V1beta1ProviderSpec {
  /**
   *
   * @type {V1beta1ProviderSpecSecret}
   * @memberof V1beta1ProviderSpec
   */
  secret: V1beta1ProviderSpecSecret;
  /**
   * Provider settings.
   * @type {{ [key: string]: any; }}
   * @memberof V1beta1ProviderSpec
   */
  settings?: { [key: string]: any } | null;
  /**
   * Provider type.
   * @type {any}
   * @memberof V1beta1ProviderSpec
   */
  type: any | null;
  /**
   * The provider URL. Empty may be used for the `host` provider.
   * @type {any}
   * @memberof V1beta1ProviderSpec
   */
  url?: any | null;
}

/**
 * Check if a given object implements the V1beta1ProviderSpec interface.
 */
export function instanceOfV1beta1ProviderSpec(value: object): boolean {
  let isInstance = true;
  isInstance = isInstance && 'secret' in value;
  isInstance = isInstance && 'type' in value;

  return isInstance;
}

export function V1beta1ProviderSpecFromJSON(json: any): V1beta1ProviderSpec {
  return V1beta1ProviderSpecFromJSONTyped(json, false);
}

export function V1beta1ProviderSpecFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): V1beta1ProviderSpec {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    secret: V1beta1ProviderSpecSecretFromJSON(json['secret']),
    settings: !exists(json, 'settings') ? undefined : json['settings'],
    type: json['type'],
    url: !exists(json, 'url') ? undefined : json['url'],
  };
}

export function V1beta1ProviderSpecToJSON(value?: V1beta1ProviderSpec | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    secret: V1beta1ProviderSpecSecretToJSON(value.secret),
    settings: value.settings,
    type: value.type,
    url: value.url,
  };
}
