/**
 * Forklift API
 * Migration toolkit for virtualization (Forklift) API definitions.
 *
 * The version of the OpenAPI document: 2.4.0
 * Contact: kubev2v-dev@redhat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists } from '../runtime';
/**
 * Network.
 * @export
 * @interface V1beta1PlanSpecMapNetwork
 */
export interface V1beta1PlanSpecMapNetwork {
  /**
   * API version of the referent.
   * @type {any}
   * @memberof V1beta1PlanSpecMapNetwork
   */
  apiVersion?: any | null;
  /**
   * If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
   * @type {any}
   * @memberof V1beta1PlanSpecMapNetwork
   */
  fieldPath?: any | null;
  /**
   * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
   * @type {any}
   * @memberof V1beta1PlanSpecMapNetwork
   */
  kind?: any | null;
  /**
   * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
   * @type {any}
   * @memberof V1beta1PlanSpecMapNetwork
   */
  name?: any | null;
  /**
   * Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
   * @type {any}
   * @memberof V1beta1PlanSpecMapNetwork
   */
  namespace?: any | null;
  /**
   * Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
   * @type {any}
   * @memberof V1beta1PlanSpecMapNetwork
   */
  resourceVersion?: any | null;
  /**
   * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
   * @type {any}
   * @memberof V1beta1PlanSpecMapNetwork
   */
  uid?: any | null;
}

/**
 * Check if a given object implements the V1beta1PlanSpecMapNetwork interface.
 */
export function instanceOfV1beta1PlanSpecMapNetwork(value: object): boolean {
  const isInstance = true;

  return isInstance;
}

export function V1beta1PlanSpecMapNetworkFromJSON(json: any): V1beta1PlanSpecMapNetwork {
  return V1beta1PlanSpecMapNetworkFromJSONTyped(json, false);
}

export function V1beta1PlanSpecMapNetworkFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): V1beta1PlanSpecMapNetwork {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    apiVersion: !exists(json, 'apiVersion') ? undefined : json['apiVersion'],
    fieldPath: !exists(json, 'fieldPath') ? undefined : json['fieldPath'],
    kind: !exists(json, 'kind') ? undefined : json['kind'],
    name: !exists(json, 'name') ? undefined : json['name'],
    namespace: !exists(json, 'namespace') ? undefined : json['namespace'],
    resourceVersion: !exists(json, 'resourceVersion') ? undefined : json['resourceVersion'],
    uid: !exists(json, 'uid') ? undefined : json['uid'],
  };
}

export function V1beta1PlanSpecMapNetworkToJSON(value?: V1beta1PlanSpecMapNetwork | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    apiVersion: value.apiVersion,
    fieldPath: value.fieldPath,
    kind: value.kind,
    name: value.name,
    namespace: value.namespace,
    resourceVersion: value.resourceVersion,
    uid: value.uid,
  };
}
